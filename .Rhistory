setwd("~/VedicCalculators")
library(devtools)
devtools::document()
devtools::check()
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
devtools::document()
devtools::check()
install.packages("usethis")
library(usethis)
use_package("suncalc")
use_package("swephR")
# Function to calculate Rahu Kalam using dynamic sunrise adjustments
calculate_rahu_kalam <- function(date, lat, lon, tz) {
date <- as.Date(date)  # Ensure correct date format
# Get sunrise time using the provided timezone
sunlight_time <- getSunlightTimes(date = date, lat = lat, lon = lon, tz = tz)
sunrise_time <- sunlight_time$sunrise
# Compute total daylight duration (sunrise to sunset)
sunset_time <- sunlight_time$sunset
day_duration <- as.numeric(difftime(sunset_time, sunrise_time, units = "secs"))
segment_duration <- day_duration / 8  # Divide daylight into 8 equal parts
# Define Rahu Kalam slot based on the day of the week
weekday <- weekdays(date)
rahu_kalam_segment <- switch(weekday,
"Monday" = 2,   # 2nd segment
"Saturday" = 3, # 3rd segment
"Friday" = 4,   # 4th segment
"Wednesday" = 5,# 5th segment
"Thursday" = 6, # 6th segment
"Tuesday" = 7,  # 7th segment
"Sunday" = 8)   # 8th segment
# Compute Rahu Kalam start and end time based on sunrise
rahu_kalam_start <- sunrise_time + (rahu_kalam_segment - 1) * segment_duration
rahu_kalam_end <- rahu_kalam_start + segment_duration
return(list(date = date, start = rahu_kalam_start, end = rahu_kalam_end))
}
# Function to predict Rahu Kalam for the next 30 days
predict_rahu_kalam_month <- function(start_date, lat, lon, tz) {
results <- list()
current_date <- as.Date(start_date)
for (i in 1:30) {  # Loop through 30 days
rahu_kalam <- calculate_rahu_kalam(current_date, lat, lon, tz)
results <- append(results, list(rahu_kalam))
current_date <- current_date + 1  # Move to the next day
}
return(results)
}
predict_rahu_kalam_month('2025-06-15', lat = -33.8688, lon = 151.2093, tz = 'Australia/Sydney')
library(suncalc)
# Function to calculate Rahu Kalam using dynamic sunrise adjustments
calculate_rahu_kalam <- function(date, lat, lon, tz) {
date <- as.Date(date)  # Ensure correct date format
# Get sunrise time using the provided timezone
sunlight_time <- getSunlightTimes(date = date, lat = lat, lon = lon, tz = tz)
sunrise_time <- sunlight_time$sunrise
# Compute total daylight duration (sunrise to sunset)
sunset_time <- sunlight_time$sunset
day_duration <- as.numeric(difftime(sunset_time, sunrise_time, units = "secs"))
segment_duration <- day_duration / 8  # Divide daylight into 8 equal parts
# Define Rahu Kalam slot based on the day of the week
weekday <- weekdays(date)
rahu_kalam_segment <- switch(weekday,
"Monday" = 2,   # 2nd segment
"Saturday" = 3, # 3rd segment
"Friday" = 4,   # 4th segment
"Wednesday" = 5,# 5th segment
"Thursday" = 6, # 6th segment
"Tuesday" = 7,  # 7th segment
"Sunday" = 8)   # 8th segment
# Compute Rahu Kalam start and end time based on sunrise
rahu_kalam_start <- sunrise_time + (rahu_kalam_segment - 1) * segment_duration
rahu_kalam_end <- rahu_kalam_start + segment_duration
return(list(date = date, start = rahu_kalam_start, end = rahu_kalam_end))
}
# Function to predict Rahu Kalam for the next 30 days
predict_rahu_kalam_month <- function(start_date, lat, lon, tz) {
results <- list()
current_date <- as.Date(start_date)
for (i in 1:30) {  # Loop through 30 days
rahu_kalam <- calculate_rahu_kalam(current_date, lat, lon, tz)
results <- append(results, list(rahu_kalam))
current_date <- current_date + 1  # Move to the next day
}
return(results)
}
predict_rahu_kalam_month('2025-06-15', lat = -33.8688, lon = 151.2093, tz = 'Australia/Sydney')
library(roxygen2)
devtools::document()
devtools::check()
use_mit_license()
use_mit_license()
use_mit_license()
Sys.setenv(TZ = "Australia/Sydney")
Sys.time()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
use_package("lubridate")
devtools::document()
rm(list = c("calculate_rahu_kalam"))
devtools::document()
devtools::check()
install.packages("quarto")
devtools::check()
install.packages("suncalc")
usethis::use_package("swephR", type = "Suggests")  # Moves it to 'Suggests' instead of 'Imports'
usethis::use_package("swephR", type = "Suggests")  # Moves it to 'Suggests' instead of 'Imports'
devtools::check()
devtools::install_github("asekhar177/VedicCalculators")
install.packages("suncalc", type = "source")
install.packages("suncalc", type = "source")
install.packages("suncalc", type = "source")
usethis::use_gpl_license(version = 3)
usethis::use_proprietary_license()
usethis::use_proprietary_license(copyright_holder = "Arjun Sekhar")
install.packages("VedicDateTime")
devtools::document()
VedicCalculators::calculate_rahu_kalam()
CelestiaKala::calculate_rahu_kalam()
CelestiaKala::calculate_rahu_kalam()
CelestiaKala::calculate_rahu_kalam("2025-06-02")
CelestiaKala::calculate_rahu_kalam("2026-01-01", -33.8688, 151.2093, "Australia/Sydney"))
CelestiaKala::calculate_rahu_kalam("2026-01-01", -33.8688, 151.2093, "Australia/Sydney")
devtools::install_github("asekhar177/CelestiaKala")
usethis::use_description()
devtools::document()
file.exists("DESCRIPTION")
setwd("~/VedicCalculators")
